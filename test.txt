        # VoxML
        VoxML = ET.Element("VoxML")
        VoxML.set("xmlns:xsi", self.xmlns_xsi)
        VoxML.set("xmlns:xsd", self.xmlns_xsd)

        # Entity
        Entity = ET.SubElement(VoxML, "Entity")
        Entity.set("Type", str(self.Entity.Type))

        # Lex
        Lex = ET.SubElement(VoxML, "Lex")
        LexPred = ET.SubElement(Lex, "Pred")
        LexType = ET.SubElement(Lex, "Type")
        if self.Lex.Pred != None:
            LexPred.text = str(self.Lex.Pred)
        if self.Lex.Type != None:
            LexType.text = str(self.Lex.Type)
        
        # Type
        Type = ET.SubElement(VoxML, "Type")
        TypeHead = ET.SubElement(Type, "Head")
        TypeComponents = ET.SubElement(Type, "Components")
        TypeConcavity = ET.SubElement(Type, "Concavity")
        TypeRotatSym = ET.SubElement(Type, "RotatSym")
        TypeReflSym = ET.SubElement(Type, "ReflSym")
        TypeArgs = ET.SubElement(Type, "Args")
        TypeBody = ET.SubElement(Type, "Body")
        TypeClass = ET.SubElement(Type, "Class")
        TypeValue = ET.SubElement(Type, "Value")
        TypeConstr = ET.SubElement(Type, "Constr")
        TypeScale = ET.SubElement(Type, "Scale")
        TypeArity = ET.SubElement(Type, "Arity")
        TypeReferent = ET.SubElement(Type, "Referent")
        TypeMapping = ET.SubElement(Type, "Mapping")
        TypeCorresps = ET.SubElement(Type, "Corresps")
        if self.Type.Head != None:
            TypeHead.text = str(self.Type.Head)
        if len(self.Type.Components) > 0:
                for x in self.Type.Components:
                    TypeComponentsComponent = ET.SubElement(TypeComponents, "Component")
                    TypeComponentsComponent.set("Value", str(x.Value))
        if self.Type.Concavity != None:
                TypeConcavity.text = str(self.Type.Concavity)
        if self.Type.RotatSym != None:
                TypeRotatSym.text = str(self.Type.RotatSym)
        if self.Type.ReflSym != None:
                TypeReflSym.text = str(self.Type.ReflSym)
        if len(self.Type.Args) > 0:
                for x in self.Type.Args:
                    TypeArgsArg = ET.SubElement(TypeArgs, "Arg")
                    TypeArgsArg.set("Value", str(x.Value))
        if len(self.Type.Body) > 0:
                for x in self.Type.Body:
                    TypeBodySubevent = ET.SubElement(TypeBody, "Subevent")
                    TypeBodySubevent.set("Value", str(x.Value))
        if self.Type.Class != None:
                TypeClass.text = str(self.Type.Class)
        if self.Type.Value != None:
                TypeValue.text = str(self.Type.Value)
        if self.Type.Constr != None:
                TypeConstr.text = str(self.Type.Constr)
        if self.Type.Scale != None:
                TypeScale.text = str(self.Type.Scale)    
        if self.Type.Arity != None:
                TypeArity.text = str(self.Type.Arity)
        if self.Type.Referent != None:
                TypeReferent.text = str(self.Type.Referent)
        if self.Type.Mapping != None:
                TypeMapping.text = str(self.Type.Mapping) 
        if len(self.Type.Corresps) > 0:
                for x in self.Type.Corresps:
                    TypeCorrespsCorresp = ET.SubElement(TypeCorresps, "Corresp")
                    TypeCorrespsCorresp.set("Value", str(x.Value))

        # Habitat
        Habitat = ET.SubElement(VoxML, "Habitat")
        HabitatIntrinsic = ET.SubElement(Habitat, "Intrinsic")
        HabitatExtrinsic = ET.SubElement(Habitat, "Extrinsic")
        if len(self.Habitat.Intrinsic) > 0:
                for x in self.Habitat.Intrinsic:
                    HabitatIntrinsicIntr = ET.SubElement(HabitatIntrinsic, "Intr")
                    HabitatIntrinsicIntr.set("Name", str(x.Name))
                    HabitatIntrinsicIntr.set("Value", str(x.Value))
        if len(self.Habitat.Extrinsic) > 0:
                for x in self.Habitat.Extrinsic:
                    HabitatExtrinsicExtr = ET.SubElement(HabitatExtrinsic, "Extr")
                    HabitatExtrinsicExtr.set("Name", str(x.Name))
                    HabitatExtrinsicExtr.set("Value", str(x.Value))
        
        # AffordStr
        AffordStr = ET.SubElement(VoxML, "AffordStr")
        AffordStrAffordances = ET.SubElement(AffordStr, "Affordances")
        if len(self.AffordStr.Affordances) > 0:
            for x in self.AffordStr.Affordances:
                AffordStrAffordancesAffordance = ET.SubElement(AffordStrAffordances, "Affordance")
                AffordStrAffordancesAffordance.set("Formula", str(x.Formula))
        
        # Embodiment
        Embodiment = ET.SubElement(VoxML, "Embodiment")
        EmbodimentScale = ET.SubElement(Embodiment, "Scale")
        EmbodimentMovable = ET.SubElement(Embodiment, "Movable")
        if self.Embodiment.Scale != None:
            EmbodimentScale.text = str(self.Embodiment.Scale)
        if self.Embodiment.Movable != None:
            EmbodimentMovable.text = str(self.Embodiment.Movable)
        
        # Attributes
        Attributes = ET.SubElement(VoxML, "Attributes")
        AttributesAttrs = ET.SubElement(AffordStr, "Attrs")
        if len(self.Attributes.Attrs) > 0:
            for x in self.Attributes.Attrs:
                AttributesAttrsAttr = ET.SubElement(AttributesAttrs, "Attr")
                AttributesAttrsAttr.set("Value", str(x.Value))

        return ET.tostring(VoxML)